// Generated by CoffeeScript 1.6.3
var Sound;

Sound = (function() {
  var instance;

  instance = null;

  function Sound() {
    if (instance != null) {
      return instance;
    }
    instance = this;
    this.playing = false;
  }

  Sound.prototype.play = function() {
    var audioctx;
    if (this.playing) {
      return;
    }
    this.playing = true;
    if (typeof webkitAudioContext !== "undefined") {
      audioctx = new webkitAudioContext();
    } else if (typeof AudioContext !== "undefined") {
      audioctx = new AudioContext();
    }
    this.ctx = audioctx;
    this.osc = {};
    return this.gain = {};
  };

  Sound.prototype.add = function(k, type, hz, vol) {
    var i, key, _i, _j, _results;
    if (!this.playing) {
      return;
    }
    for (i = _i = 0; _i <= 1; i = ++_i) {
      key = k + ":" + ((type + i) % 4);
      if (this.osc[key] == null) {
        this.gain[key] = this.ctx.createGainNode();
        this.gain[key].connect(this.ctx.destination);
        this.osc[key] = this.ctx.createOscillator();
        this.osc[key].connect(this.gain[key]);
        this.osc[key].noteOn(0);
      }
    }
    _results = [];
    for (i = _j = 0; _j <= 1; i = ++_j) {
      key = k + ":" + ((type + i) % 4);
      this.osc[key].frequency.value = hz;
      this.osc[key].type = (type + i) % 4;
      _results.push(this.gain[key].gain.value = i === 0 ? 1 - vol : vol);
    }
    return _results;
  };

  Sound.prototype.remove = function(k) {
    var i, key, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      key = k + ":" + i;
      if (this.osc[key] == null) {
        continue;
      }
      this.osc[key].noteOff(0);
      delete this.osc[key];
      _results.push(delete this.gain[key]);
    }
    return _results;
  };

  return Sound;

})();
